
import 'dart:async';
import 'dart:convert';

import 'package:http/http.dart'as http;

import 'Encryprt/encrypt.dart';
import 'WebApi/getUserInfo.dart';
import 'WebApi/get_pod.dart';
import 'modelclass.dart';

class Apicall{


  static Timer? timerforUniqueId;
  static Timer? timerforApi;
  static Timer? timerforisqrassigncheck;
  static final url = "http://demoarea.1akal.in/cj/mobile_api/employee/qr_code/save_unique_key";
  static final urlisqrassigned = "http://demoarea.1akal.in/cj/mobile_api/employee/qr_code/is_qr_code_assign_to_user";

  //Function for saving Qrcode--------------//
  static Future<get_prod>  posting(String unique_id, String  created_by, String  created_ip ) async {
    try {
      final response = await http.post(
        Uri.parse(url),
        headers: <String, String>{
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        },
        body: {
          "unique_id": unique_id,
          "created_by" : created_by,
          "created_ip" : created_ip
        },
      );
      print(response.statusCode);
      if (response.statusCode == 200) {
        print(response.body);
        // If the server did return a 201 CREATED response,
        // then parse the JSON.
        /* var obj = CustomAlert();
        obj.showCustomAlert(context);*/
        // return _getprod.fromJson(jsonDecode(response.body));
      }
      else {
        // If the server did not return a 201 CREATED response,
        // then throw an exception.
        throw Exception('Failed to create get product.');
      }
    } catch (e) {
      print(e);
    }
    return get_prod(
      unique_id: unique_id,
      created_by: created_by,
      created_ip: created_ip,
    );
  }

  //Function for getting UserInformation--------------//
  static Future<getuserInfo> togetuserInfo(String QrCodeUniqueId, String key ) async {
    try {
      final response = await http.post(
        Uri.parse(urlisqrassigned),
        headers: <String, String>{
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        },
        body: {
          "QrCodeUniqueId": QrCodeUniqueId,
          "key" : key,
        },
      );
      print(response.statusCode);
      if (response.statusCode == 200) {
        print(response.body);
        //"statusCode":true
        if(timerforisqrassigncheck!.isActive){
          print("Timer is still Active");
        }
        //print(response.body);
        var datafrombody= Autogenerated.fromJson(jsonDecode(response.body));
        print(getDecryptedData(datafrombody.data.toString()));
        if(datafrombody.statusCode == true){
          timerforisqrassigncheck!.cancel();
          timerforUniqueId!.cancel();
          timerforApi!.cancel();
        }
      }
      else {
        // If the server did not return a 201 CREATED response,
        // then throw an exception.
        throw Exception('Failed to create get product.');
      }
    } catch (e) {
      print(e);
    }
    return getuserInfo(
        QrCodeUniqueId: QrCodeUniqueId,
        key: key
    );
  }
}